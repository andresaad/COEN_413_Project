COEN413/COEN6541- Hardware Functional Verification
1 of 3
Questa SystemVerilog
LAB 4: Constrained, Directed & Coverage Driven Testing
Goal Get familiar with:
o inheritance
o constraint block
o covergroups
Location From the course Website, download the file lab4.tar.gz
gunzip lab4.tar.gz
tar -xvf lab4.tar
Design APB interface
Relevant Files in lab4 directory:
hdl/root.sv Global declarations &
timescale
hdl/mem.sv APB interface DUT
hdl/top.sv Top level netlist
tests/test.sv Top level testbench program
apb_env/apb_defines.sv Address/data width
parameters
apb_env/apb_if.sv Interface / clocking block
definition
apb_env/apb_trans.sv Transactor class
apb_env/apb_gen.sv Generator class
apb_env/apb_master.sv Master class
apb_env/apb_monitor.sv Monitor class
env/env.sv Environment class
env/scoreboard.sv Scoreboard Class
tests/test_directed.sv Test with directed test by
overriding random call
tests/test_constrained.sv Test with directed test via
constraint block
tests/test_cvr_driven.sv Random test with coverage
feedback
Lab instructions:
COEN413/COEN6541 - Hardware Functional Verification
2 of 3
1) In tests/test_01_directed.sv, extend the apb_gen class, and provide a new
implementation of the get_transaction task that creates 32 write transactions then 32
reads. See the next page for an OOP example. (Remember that the generator contains the
variable trans_cnt that has the current transaction number.)
2) tests/test_02_constrained.sv, extend the apb_trans class, and create
constraint block that sends 32 write transactions, and then 32 read transactions. Use a
constraint block with the if-constraint that tests trans_cnt.
3) In tests/test_03_cvr_driven.sv, create a functional covergroup with the
following cover points:
tran: cover transaction type
addr : cover address
data : cover data with 4 bins, data {8’h00,8’h55,8’haa,8’hff}
Create cross coverage of all three-cover groups. Run the test and look to the transcript. Then
create coverage reports.
3 of 3
COEN413/COEN6541
// Original generator
class apb_gen;
int trans_cnt;
function apb_trans get_transaction();
// Create a new transaction
endfunction
endclass
// Original environment
class env;
apb_gen gen;
task new; // Construct environment
gen = new; // Create basic generator
endtask
task main;
gen.main(); // Run the generator referenced by “gen”
endtask
endclass : env
// New generator that has replacement task get_transaction
class my_gen extends apb_gen;
function apb_tran get_transaction();
if (trans_cnt > 32)
// do something interesting
endfunction
endclass : my_gen
// OOP code to replace apb_gen with my_gen
program test;
env the_env; // The basic environment
my_gen genx; // The extended generator
initial begin
the_env = new; // Create basic env and generator
genx = new(); // Create extended generator
the_env.gen = genx; // Make env use extended generator
the_end.run(); // Run test with extended generator
$finish;
end
endprogram
- Hardware Functional Verification

-----------------------------------------------------------------------------test_01_directed.sv-----------------------------------------------------------------------
/***************************************************************************
 *
 * File:        $RCSfile: test_01_directed.sv,v $
 * Revision:    $Revision: 1.6 $  
 * Date:        $Date: 2003/07/15 15:18:54 $
 *
 *******************************************************************************
 *
 * This test shows how to create directed test by generating
 * transactions on-the-fly (e.g on-demand).
 *
 * Basically, a mem_cell_trans object is directly generated
 * throughout the simulation run set in order to create a
 * directed test.
 *
 * The scenario implemented here performs the following
 * transactions:
 *    - Constrained generation of object during simulation
 *    - Generates 32 WRITE cycles at address [0..31]
 *      with random data
 *    - Generates 32 READ cycles at address [0..31]
 *
 * The virtual methods in l2_gen are here overwritten so
 * to fulfill the above test patterns
 *
 *******************************************************************************
 * Copyright (c) 1991-2005 by Synopsys Inc.  ALL RIGHTS RESERVED.
 * CONFIDENTIAL AND PROPRIETARY INFORMATION OF SYNOPSYS INC.
 *******************************************************************************
 */


parameter TEST_LENGTH = 64;


program automatic test(apb_if aif);

`include "env/env.sv"


class my_gen extends apb_gen;
  
  // Constructor
  function new(mailbox #(apb_trans) apb_mbox, int max_trans_cnt, bit verbose=0);
    super.new(apb_mbox, max_trans_cnt, verbose);
  endfunction


  // Provides a new implementation of get_transaction()
  // This is how the directed testing flavor is performed
  
function apb_trans get_transaction();
    rand_tr = new();

// LAB: Create procedural code to generate 32 write transactions then
// 32 read transactions
    if (trans_cnt < 32) begin
        if (! this.rand_tr.randomize() with {(transaction == WRITE);})
          begin
            $display("apb_gen::randomize failed");
            $finish;
          end
    end
    else if(trans_cnt < 64) begin
        if (! this.rand_tr.randomize() with {(transaction == READ);})
          begin
            $display("apb_gen::randomize failed");
            $finish;
          end
    end

    //get_transaction = tr;
    return rand_tr.copy();
  endfunction
  
endclass: my_gen


// Top level environment
env the_env;

// Instanciate the customized generator
my_gen my_generator;

initial begin
  // Instanciate the top level
  the_env = new(aif);

  // Plug the new generator & config
  my_generator = new(the_env.gen2mas, TEST_LENGTH, 1);
  the_env.gen = my_generator;

  // Kick off the test now
  the_env.run();

  $finish;
end 

endprogram
-------------------------------------------------------------------test_02_constrained.sv-----------------------------------------------------------------------------
/***************************************************************************
 *
 * File:        $RCSfile: test_02_constrained.sv,v $
 * Revision:    $Revision: 1.2 $
 * Date:        $Date: 2003/07/15 15:18:54 $
 *
 *******************************************************************************
 *
 * This test shows how to create directed test by generating
 * transactions on-the-fly (e.g on-demand).
 *
 * Basically, a apb_trans object is directly generated
 * throughout the simulation run with specific constraints
 * set in order to create a directed test.
 *
 * The scenario implemented here performs the following
 * transactions:
 *    - Constrained generation of object during simulation
 *    - Generates 32 WRITE cycles at address [0..31]
 *      with random data
 *    - Generates 32 READ cycles at address [0..31]
 *
 *******************************************************************************
 * Copyright (c) 1991-2005 by Synopsys Inc.  ALL RIGHTS RESERVED.
 * CONFIDENTIAL AND PROPRIETARY INFORMATION OF SYNOPSYS INC.
 *******************************************************************************
 */


parameter TEST_LENGTH = 64;


program automatic test(apb_if aif);

`include "env/env.sv"


// Extends the apb_trans to provide test-specific implementation
  class my_trans extends apb_trans;
    
// LAB: Create constraint block to generate 32 write transactions then
// 32 read transactions.  Use the "if" construct to test trans_cnt.
    constraint mode_c {
        if (trans_cnt < 32)
            transaction == WRITE;
        else if (trans_cnt < 64)
            transaction == READ;
    }
endclass


// Top level environment
env the_env;

// Instanciate the customized generator
my_trans my_tr;

initial begin
  // Instanciate the top level
  the_env = new(aif);
  the_env.gen.max_trans_cnt = TEST_LENGTH;
  
  my_tr = new;

  // LAB: Plug the new transaction into the generator's rand_tr


  // Kick off the test now
  the_env.run();

  $finish;
end

endprogram

------------------------------------------------------------------test_03_cvr_driven.sv--------------------------------------------------------------------------------
/***************************************************************************
 *
 * File:        $RCSfile: test_03_cvr_driven.sv,v $
 * Revision:    $Revision: 1.2 $  
 * Date:        $Date: 2003/07/15 15:18:54 $
 *
 *******************************************************************************
 *
 * This test shows how to create coverage-driven test by generating
 * random transactions (e.g on-demand) until an expected
 * coverage goal is achieved.
 *
 * Basically, an apb_trans object is randomly generated
 * throughout the simulation run set in order to create a
 * directed test.
 *
 * A coverage group is attached to my_gen class and is used
 * to measure that the following conditions are met:
 *
 *   - All addresses
 *   - All READ,WRITE transactions
 *   - All possible data inside [0x00, 0x55, 0xAA, 0xFF]
 *
 * The virtual methods in my_gen are here overwritten so
 * to fulfill the above test patterns
 *
 *******************************************************************************
 * Copyright (c) 1991-2005 by Synopsys Inc.  ALL RIGHTS RESERVED.
 * CONFIDENTIAL AND PROPRIETARY INFORMATION OF SYNOPSYS INC.
 *******************************************************************************
 */

parameter TEST_LENGTH = 64;


program automatic test(apb_if hif);

`include "env/env.sv"

class my_gen extends apb_gen;
  
  // Define a coverage group aimed at ensuring that all
  // addresses, data and transactions are hit
    parameter APB_ADDR_WIDTH = 16;
    bit [APB_ADDR_WIDTH-1:0] new_apb_addr_t;
    parameter APB_DATA_WIDTH = 32;
    bit [APB_DATA_WIDTH-1:0] new_apb_data_t;
    enum {READ, WRITE, IDLE} new_trans;
  covergroup TransCov;
    
// LAB: Cover the transaction type 
    trans: coverpoint new_trans;
// LAB: Cover the address values
    // All addresses
    addr: coverpoint new_apb_addr_t;
    
// LAB: Cover selected data values
    // Select data (4 values)
    data: coverpoint new_apb_data_t {
        bins a = {0};
        bins b = {85};
        bins c = {170};
        bins d = {255};
    }


// LAB: Now perform cross coverage
    // Define a cross container based upon the 3 previous samples. 
    // Ensures that corner cases are also hit.
    tr_data_addr: cross trans, addr, data;

  endgroup


  // Constructor
  function new(mailbox #(apb_trans) apb_mbox=null, int max_trans_cnt, bit verbose=0);
    super.new(apb_mbox, max_trans_cnt, verbose);
    TransCov = new();
  endfunction


  function apb_trans get_transaction();
    int s;
    s = this.rand_tr.randomize() with {data inside {8'h00, 8'h55, 8'haa, 8'hff};
                                       transaction != IDLE;};
    if (!s) begin
      $display("apb_gen::randomize failed");
      $finish;
    end
    
    TransCov.sample;
    return rand_tr.copy();
  endfunction
  
endclass: my_gen


// Top level environment
env the_env;

// Instanciate the customized generator
my_gen my_generator;


initial begin
  // Instanciate the top level
  the_env = new(hif);

  // Plug the new generator
  my_generator = new(the_env.gen2mas, TEST_LENGTH, 1);
  the_env.gen  = my_generator;

  // Kick off the test now
  the_env.run();

  $finish;
end 

endprogram



